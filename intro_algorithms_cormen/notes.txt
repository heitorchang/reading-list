p. 45-46 Given the set of functions Big-Theta(g(n)), g(n) is an asymptotically tight bound for any f(n) belonging to this set.

f(n) belongs to Big-Theta(g(n)) if there exist positive constants c1, c2, and n0 such that 0 <= c1*g(n) <= f(n) <= c2*g(n) for all n >= n0

p. 47 Big-O notation is only an asymptotic upper bound. O(g(n)) is a set of functions such that

O(g(n)) = {f(n): there exist positive constants c and n0 such that 0 <= f(n) <= c*g(n) for all n >= n0}

p. 52 an analogy between asymptotic comparison of functions f and g and real numbers is:

f(n) = O(g(n))     is like a <= b (tight bound)
f(n) = Omega(g(n)) is like a >= b (tight bound)
f(n) = Theta(g(n)) is like a = b
f(n) = o(g(n))     is like a < b
f(n) = omega(g(n)) is like a > b

p. 147 In sorting problems, the numbers to be sorted are keys of records. The records are part of the collection of data to be sorted. In addition to the key, each record typically contains "satellite data."

p. 162 A max-priority queue may be used to schedule jobs (higher priority items get performed first). A min-priority queue may simulate events according to each event's time of occurrence.

p. 215 In the problem of finding the min and max elements of an array, process the elements in pairs, say a and b. First compare a with b, then compare the smaller of the two with the current minimum, and the larger with the current maximum. Thus we need 3 comparisons per 2 elements instead of 2 comparisons per 1 element, as would be done in a more obvious way.
