2nd reading, 23 July 2017

See file resources.py for useful bits of code

p. 29 Metodos especiais e construções básicas da linguagem:

- iteração
- coleções
- acesso a atributos
- sobrecarga de operadores
- chamada de funções e métodos
- criacao e destruicao de objetos
- representacao e formatacao de strings
- contextos gerenciados (blocos with)

p. 30 __len__ and __getitem__ for French deck of cards
_cards (internal attribute)

p. 31 with __getitem__, we can slice the deck:
deck[12::13] = all spades

for card in deck:
    ...

p. 32 Card('Q', 'hearts') in deck

Sort by rank, then by suit

suit_values = dict(spades=3, hearts=2, diamonds=1, clubs=0)

def spades_high(card):
    rank_value = FrenchDeck.ranks.index(card.rank)
	return rank_value * len(suit_values) + suit_values[card.suit]

sorted(deck, key=spades_high)

p. 35

from math import hypot

class Vector:
    def __init__(self, x=0, y=0):
	    self.x = x
		self.y = y
		
	def __repr__(self):
	    return 'Vector(%r, %r)' % (self.x, self.y)

	def __abs__(self):
		return hypot(self.x, self.y)

	def __bool__(self):
		return bool(abs(self))

	def __add__(self, other):
		x = self.x + other.x
		y = self.y + other.y
		return Vector(x, y)

	def __mul__(self, scalar):
		return Vector(self.x * scalar, self.y * scalar)

%r uses a repr() conversion

p. 37 bool() of user-defined instances is by default True, unless __bool__ or __len__ are implemented.

p. 45

Container sequences -- list, tuple, and collections.deque -- store references to objects.

Flat sequences -- str, bytes, bytearray, memoryview, and array.array -- physically store the value of each item in its memory, and not as distinct objects.

Another way to classify them is:

Mutable sequences -- list, bytearray, array.array, deque, memoryview

Immutable sequences -- str, tuple, bytes

p. 46 terminology: listcomp and genexp (generator expression)

p. 51

if a list is not needed, use a genexp. If the genexp is the only argument in a function, the pair of parentheses do not need to be duplicated.

symbols = "$#@0AZ"
t = tuple(ord(symbol) for symbol in symbols)

p. 61 slice objects are like spreadsheet cell ranges

# odd-numbered letters, considering first letter as 1, odd
odds = slice(None, None, 2)  
name = "Jonathan"
name_odds = name[odds]  # Jnta

p. 62-63 slices can be used on the left side as assignment targets

a = list(range(10))
a[1:5] = [55]
a  # [0, 55, 5, 6, 7, 8, 9]

p. 69 list.sort() is in-place, sorted(a) returns a new list
sorted can sort immutable iterables like str

sorted has optional parameters reverse and key

key may also be used in min(), max(), itertools.groupby(), and heapq.nlargest()

p. 71-74

bisect.bisect(sorted_list, item_to_insert) returns the position where the item should be placed. By default, it is placed to the right. bisect_left places it to the left

p. 82-84 deque

p. 108 from types import MappingProxyType

a way of viewing a dictionary's items, without being able to modify them.
p. 118 Explanation of how hash tables are used behind the scenes for dicts and sets

p. 122 If a custom class implements __eq__, it should also implement an adequate __hash__.

p. 130 What is a character? Python 3.4 uses the Unicode 6.3 standard, which defines characters up to U+10FFFF.

p. 134 Use memoryview, struct, struct.unpack() to read a GIF header

p. 138 To avoid a UnicodeEncodeError, pass the optional 'errors' argument:

s.encode('cp437', errors='ignore')  # or 'replace', 'xmlcharrefreplace'

p. 141 File coding 'magic comment'

# coding: cp1252

p. 142 detect string an file encoding with chardet

p. 159 Sorting Unicode strings can be done with locale.strxfrm as the key in sorting, but relies on the locale existing in the operating system.

p. 161 An alternate solution for Unicode sorting is the PyUCA package found in PyPI

p. 190 inspect module allows function introspection

p. 192 Function annotations are stored in __annotations__. Nothing else is really done.
