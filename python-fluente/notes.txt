2nd reading, 23 July 2017

See file resources.py for useful bits of code

p. 29 Metodos especiais e construções básicas da linguagem:

- iteração
- coleções
- acesso a atributos
- sobrecarga de operadores
- chamada de funções e métodos
- criacao e destruicao de objetos
- representacao e formatacao de strings
- contextos gerenciados (blocos with)

p. 30 __len__ and __getitem__ for French deck of cards
_cards (internal attribute)

p. 31 with __getitem__, we can slice the deck:
deck[12::13] = all spades

for card in deck:
    ...

p. 32 Card('Q', 'hearts') in deck

Sort by rank, then by suit

suit_values = dict(spades=3, hearts=2, diamonds=1, clubs=0)

def spades_high(card):
    rank_value = FrenchDeck.ranks.index(card.rank)
	return rank_value * len(suit_values) + suit_values[card.suit]

sorted(deck, key=spades_high)

p. 35

from math import hypot

class Vector:
    def __init__(self, x=0, y=0):
	    self.x = x
		self.y = y
		
	def __repr__(self):
	    return 'Vector(%r, %r)' % (self.x, self.y)

	def __abs__(self):
		return hypot(self.x, self.y)

	def __bool__(self):
		return bool(abs(self))

	def __add__(self, other):
		x = self.x + other.x
		y = self.y + other.y
		return Vector(x, y)

	def __mul__(self, scalar):
		return Vector(self.x * scalar, self.y * scalar)

%r uses a repr() conversion

p. 37 bool() of user-defined instances is by default True, unless __bool__ or __len__ are implemented.

