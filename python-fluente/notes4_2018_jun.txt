# Fourth reading, began 11 jun 2018
    
30 Example: deck of cards

from collections import namedtuple
Card_tuple_subclass = namedtuple('Card_display_name', 'rank suit')

def __getitem__(self, position):
    """allows evaluation of deck[0], deck[-1], etc."""
    return self._cards[position]

31 random.choice picks an element from an array, range, or the deck, which implements __getitem__

33 len in CPython actually reads ob_size of a C struct. It's much faster, so it's the reason len is a function, not a method

35 __abs__, __add__, __mul__, __repr__

36 __repr__ should return the code needed to recreate the represented object, such as Vector(1, 2)

__str__ should produce a suitable string for the end user. If __str__ is undefined, __repr__ is called.

38 https://www.python.org/dev/peps/pep-0357/
__index__ allows any object to be used for slicing (in particular, NumPy uses different sized integers, that should be allowed inside slices)

45 list, tuple, and collections.deque can store items of different types. They store references to the objects they contain.

str, bytes, bytearray, memoryview, and array.array can store items of only one type.

mutable: list, deque, bytearray, array.array, memoryview
immutable: tuple, str, bytes

46 listcomp = list comprehension
genexp = generator expression

47 line breaks are ignored inside (), [], and {}. \ is not needed at the end of lines inside these brackets.

49 Cartesian product

colors = ['red', 'blue']
sizes = ['S', 'M', 'L']
tshirts = [(size, color) for size in sizes for color in colors]
# [('S', 'red'), ('S', 'blue'), ('M', 'red')...]

50 genexps save memory and should be used unless a list is really needed

symbols = '@#$'
t = tuple(ord(symbol) for symbol in symbols)  # (64, 35, 36)

54 unpacking a tuple as arguments of a function

t = (20, 8)
quotient, remainder = divmod(*t)

55 use * to capture excessive arguments. The starred variable may be anywhere. Unpacking structures may also be nested, such as (a, b, (c, d)).

a, b, c* = range(5)  # c is [2, 3, 4]

a, *b, c = range(4)  # b is [1, 2]

57 namedtuples have the _asdict() instance method that returns an OrderedDict

61 slices may be named, such as column ranges in a text spreadsheet
UNIT_PRICE = slice(40, 52)

62 in NumPy, the slice syntax a[m:n, k:l] returns a 2-D slice

62 Slices may be used in assignments to splice and remove elements

64 Use [['_'] * 3 for i in range(3)] instead of [['_'] *  3] * 3 because the latter will repeat the same list reference three times.

69 avoid putting mutable items in tuples

69 sorted() has two optional parameters: reverse=True and key=str.lower, len, etc.

70 key is also used in min(), max(), itertools.groupby(), heapq.nlargest()

72 bisect.bisect(lst, x) is an alias for bisect_right() and returns an index where x should be inserted in lst, such as lst.insert(idx, x). bisect_left() only differs from bisect() when x is already in lst.

73 use bisect to separate values into buckets

import bisect

def grade(score, breakpoints=[60, 70, 80, 90], grades="FDCBA"):
    i = bisect.bisect(breakpoints, score)
    return grades[i]

74 bisect.insort(seq, item) inserts item into seq, maintaining it in ascending order.

75 array.array is optimized for containing only numbers of the same type

array has the methods fromlist(), fromfile(), tolist(), and tofile()

78 memoryview() is a class that allows byte-by-byte manipulation of data structures without making a copy

82 deque

83 deque.rotate(n) : if n > 0, items are shifted to the right, otherwise to the left if n < 0. Items are moved in-place

85 queue.Queue is used for communication between threads. deque is used as a collection.

multiprocessing is used for communication between processes.

heapq provides functions to operate on lists; call heapify(lst)

91 trick to sort a mixed list of strings and ints: sorted(lst, key=int) 

94 use isinstance(3, int) to check the type of an object

95 ways of creating dicts:

a = dict(one=1, two=2)
b = {'one': 1, 'two': 2}
dict comprehensions { key: value for... }

97 d.get(key, [default])
d.setdefault(key, [default])
d.keys()
d.values()
d.update(m)

101 dd = defaultdict(list)  # call with a default factory (without arguments)
But dd.get(k) will not call the factory

105 collections.OrderedDict
collections.ChainMap
collections.Counter
collections.UserDict

106 Subclassing UserDict is preferable to dict because certain overwritten dict methods do not get called. The actual data is stored in self.data

108 from types import MappingProxyType
MappingProxyType(d) creates a mappingproxy object for reading items of a dict

113 Set comprehensions {chr(i).upper() for i in range(48, 128)}

115 for a set s:
s.discard(e)  # does not raise an error if e does not exist
s.remove(e)   # raises KeyError if e does not exist

122 if __eq__ is implemented, __hash__ should be too. If a == b, then hash(a) == hash(b) must also be true. If __eq__ depends on mutable state, __hash__ should raise a TypeError ("unhashable type")

131 bytes is immutable, bytearray is mutable

132 seq[0] == seq[:1] is only true for str. For other sequence types, seq[:1] will return the same sequence type, while seq[0] is of an item type

132 \t, \n, and \r are escape sequences for tab, newline, and carriage return

134 Using struct with memoryview

142 Use the chardet package to detect a text file's encoding

145 always pass encoding="???" when reading and writing text files

151 from unicodedata import normalize
# 'NFC', 'NFD', 'NFKC', 'NFKD' (Normalization Forms)

NFC generates the smallest string possible. It is recommended to use NFC

'K' stands for Compatibility. Information may be lost; for example, 4^2 may be replaced by 42.

154 S.casefold() is used for caseless comparisons

156 the custom function shave_marks() removes diacritics

159 locale-specific sorting with key=locale.strxfrm. However, the locale must be installed in the underlying OS. Most successful in GNU/Linux

161 Alternative for Unicode text sorting: the PyUCA package

175 Functions are first-class objects (for example, round() is of <class 'builtin_function_or_method'>. User functions are <class 'function'>)

177 A higher-order function is one that accepts functions as arguments or returns a function

179 all(iterable) checks whether all values are True (or truthy), any(iterable) checks if at least one is truthy

180 a lambda expression's body is limited to pure expressions (assignments, while, try are not allowed)

181 The 7 callable objects are:
- builtin functions
- builtin methods
- user-defined functions
- user-defined methods
- classes (__new__, then __init__ are called)
- instances (if __call__ is defined)
- generator functions (functions or methods that have the yield keyword)

182 callable() checks if an object is callable

182 When creating an instance that accepts a list, it's a good idea to make a local copy: self._items = list(items)

185 * and ** in function parameters

187 required keyword parameters may be placed after a single * in the parameter list: def f(a, *, b): ...

190 how to use 'signature' in the 'inspect' module

192 function annotations such as def clip(text:ster, maxLen:'int > 0'=80) -> str: serve merely as metadata. There are no checks or guarantees

195 the 'operator' module includes many arithmetic operators that are more readable than an equivalent lambda expression.

from functools import reduce
from operator import mul

def fact(n):
    return reduce(mul, range(1, n+1))

195 operator.itemgetter(i, j, ..., k) work like lst[i], returning the value of the ith item (or a tuple if there are many indices).

It can be used as the key(s) in sorting with respect to one or more columns

a = [0, 10, 20]
ig = itemgetter(0, 2)
ig(a)  # (0, 20)

sorted(b, key=itemgetter(1))

196 attrgetter extract attributes (fields) from objects

197 iadd, iand, etc. are inplace operator like += and &=

197 methodcaller(f, g, ...) calls the methods f, g, etc. on the given ovject argument

198 functools.partial creates a new function with some of the arguments of the original function fixed (frozen in place)

def f(a, b):
    return a + b
    
addTo9 = partial(f, 9)

addTo9(1)  # 10

If a function is called often with the same argument, such as unicode.normalize('NFC', s), it may be worthwhile to use partial.

200 partialmethod works on methods

