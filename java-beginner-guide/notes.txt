began 21 apr 2020

Security, Portability
Seguranca, Portabilidade

Bytecode, Just-In-Time compiler, HotSpot, Ahead-of-time compiler

Servlet: um programa pequeno que executa no servidor (estende a funcionalidade de um servidor web)

Encapsulacao: mecanismo que une codigo e os dados que serao manipulados. Evita interferencia externa e uso indevido. (caixa preta)

Codigo e dados podem ser private ou public

Uma classe é uma especificaco de como construir um objeto (variaveis de instancia e metodos).

Polimorfismo: a abilidade de uma interface acessar uma classe geral de ações. Exemplo: um volante permite direcionar um carro, caminhao, trator, etc.

Herança: uma classe poder adquirir propriedades de uma superclasse. Exemplo: Pessoa, Aluno, Professor

Try this 1-1: Convert gallons to liters

GalToLit.java

for-each loop:
for(int x : nums) { sum += x; }

While it's ok for a reference variable of a superclass to refer to a subclass, this reference may not access a member of the subclass (because the superclass has no knowledge of a subclass).

Dynamic method dispatch: the mechanism by which a call to an overridden method is resolved at run time rather than compile time. (run-time polymorphism)

For an overridden method, the version that is run will be that of the object being referred to.

Throwable is the superclass of Exception and Error. Errors are related to JVM errors, while Exceptions result from program activity

Exception handling uses try, catch, throw, throws, and finally

Various storage classes like Maps and Sets only work with objects. So, primitives must be wrapped in their corresponding objects.

java.util.Scanner
Scanner conin = new Scanner(System.in)
int i;

if (conin.hasNextInt()) {
  i = conin.nextInt();
}

13. Generics

The term "generics" means "parametrized types" (the type is passed as a parameter to the variable type declaration)

A class, interface, or method that operates on a type parameter is generic (a generic class or generic method)

Generic code works with multiple types of data, such as sorting numbers or strings with the same logic

Bounded types
NumericFns<T extends Number>

Wildcard: the wildcard matches any valid NumericFns object
boolean absEqual(NumericFns<?> ob) { }

Wildcards may be bounded
myFn(Gen<? extends A> ob) { }

a parametrized type may extend an interface
static <T extends Comparable<T>, V extends T> boolean arraysEqual(T[]x, V[]y) { }

486 cannot instantiate an array whose element type is a type parameter
also, cannot create an array of type-specific generic references

vals = new T[10];  // not OK
Gen<Integer> gens[] = new Gen<>[10];  // not OK

These are OK:

T vals[];
Gen(T o, T[] nums) {
  vals = nums;
}

Gen<?> gens[] = new Gen<?>[10];
T[] ts = (T[]) new Object[10];
