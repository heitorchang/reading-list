Ch 1

1. Bytecode is intermediate instructions (between human readable code and machine code) to be executed by the virtual machine

2. Encapsulation, Polymorphism and Inheritance

3. the main() method

[X] 4. a label for a value, it may be changed as the program progresses
    a variable is a named memory location whose contents may be changed during the execution of a program

5. 67count (D)

6. //, /*  */

7. if (cond) { block }, for (init; cond; iter) { block }

8. { }

9. moon = earth * 0.17

10. 1 meter = 39.37 inches

11. syntax error

12. no

Ch 2

[X] 1. for efficiency (measure how much memory to occupy)
    for portability

2. it's a 16-bit number (Unicode)

3. false

4. one\ntwo\nthree

[X] 5. missing int i
    sum is declared inside for block, redefining it every time. Also, sum cannot be used outside the for block

6. increment happens before (++i) or after (i++) retrieving the variable's value

7. (i != 0) && (x / i)

8. int

9. when adding smaller integer types or forcing loss of information

10. check n % i != 0 for all i

11. no

12. yes

Ch 3

1. See ReadUntilPeriod.java

2. if (cond) {

   } else if (cond2) {

   } else {

   }

[X] 3. x < 10
    y > 100

4. for (int i = 1000; i >= 0; i -= 2) { }

[X] 5. yes, but i will have incremented by one more than the values in sum
    no, i is outside the for declaration

6. exits the innermost loop, or if a label is used, exits the block that has that label

7. after while; after for

[X] 8.

0 1
2 3
4 5
6 7
8 9

9. see LoopGeometric.java

10. see SwapCase.java

11. a loop that does not end normally or has breaks

[X] 12. yes

Ch 4

1. a class is a model, or template for objects. It describes the form and behavior of objects. Objects need to be instantiated with new Something()

2. class SomeName { }

3. instance variables

4. class MyCounter { }
MyCounter counter;
counter = new MyCounter();

5. double MyMeth(int a, int b) { }

6. return value;

7. same name as the class name

8. creates an instance (allocates memory) and initializes data using the class' constructor

9. reclaims memory from objects that have no references pointing at them. it is done when needed

10. a reference to the object on which a method is invoked.

11. yes

12. void

Ch 5

1. double[] a = double[10];
double a[] = double[10];
var a[] = double[10];

2. int[] a = { 1, 2, 3, 4, 5 };

3. see ArrayAverage.java

4. see SortStrings.java

5. indexOf() returns first occurrence (from the left) while lastIndexOf() returns last occurrence

6. "abc".length(), "abc".charAt(0)

7. convert 8 characters into a binary string?

8. no

9. x < 0 ? y = 10 : y = 20;

10. logical, because it is applied on booleans

11. yes, yes

12. >>>, moves bits to the right and always places a zero on the left

13. for (var i : array)

14. no, because indices are used

15. yes

16. var

17. var done = false;

18. yes, no

19. no, var cannot be used for arrays.

[X] 20. yes
    no, var can only be used one at a time

21. var mask = 1L;

Ch 6

1. no, count is private

2. precede

3. see Stack.java

4. Test t1 = new Test(1);
   Test t2 = new Test(2);
   int tmp = t1.a;
   t1.a = t2.a;
   t2.a = tmp;
 
5. no, signatures are the same (return types are insufficient for overloading)

6. see RecursiveBackwards.java

7. static

8. initialization of a class, such as connecting to a network

9. a class inside a class (a nonstatic nested class)

10. private

11. signature

12. value

13. int sum(int... values) {
  int total = 0;
  for (var i : values) {
    total += i;
  }
  return total;
}

14. yes

15. int f(int... a), int g(int b, int... c)

Ch 7

1. no, yes

[X] 2. class Circle extends TwoDShape {
  Circle(double r) {
    super(r, r);
  }
  
  double area() {
    return 3.1415 * (getWidth() / 2) * (getWidth() / 2);  // radius is half of
                                                          // width
  }
}

3. private

4. super constructor and super member variable access

5. alpha, beta, gamma

6. dynamic method dispatch. the object being referred to determines which version of the method is called

7. a class that defines an empty method and whose subclasses must implement them

8. final

9. a consistent interface to various subclasses

10. Object

11. true

12. final

13. A

14. B

Ch 8

1. put files in qpack/ directory. import qpack.*;

2. a scope of valid names; it is important because in large projects. names can collide

3. directories

[X] 4. default access is package access, protected members may be accessed in its package and also by subclasses in other packages.

[X] 5. import or fully qualify its name

6. the interface exemplifies polymorphism

7. as many as you wish, as many as you wish

8. yes

9. interface IVehicle {
  int getPassengers();
}

[X] 10. yes

11. true, though it may contain interfaces

12. java.lang

13. default int ...

14. yes

15. with a default interface method

16. InterfaceName.methodName()

17. yes, to be used inside it.

Ch 9

1.Throwable

2. place code that may cause an error inside the try block. the catch block will execute if an error happened

3. no try block

4. JVM aborts and prints a stack trace

5. B is a subclass and should appear before A

6. yes

7. False, it is the block that runs after a try/catch block regardless of what happened

[X] 8. checked
    All exceptions except Errors and RuntimeExceptions

9. MyClass needs to subclass Throwable

10. class FullStackException extends Exception {}
// constructor with stack size as a parameter
throw new FullStackException(stackLength);

[X] 11. throw, error in the JVM, error in the program

12. Exception, Error

13. placing OR (pipes) | between Exceptions so that a catch block runs when any of those exceptions are thrown

14. No, they are JVM errors outside your control
