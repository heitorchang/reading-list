Started 7.may.19

Part I
25 Firefox, git bash, geckodriver
29 python -m venv venvsuperlists
net  pip freeze > requirements.txt
31 pip install django "selenium<4"
39 selenium functional_tests.py
41 django-admin startproject superlists
44 gitignore
45 git rm -r --cached __pycache__
49 functional test = acceptance test = end-to-end test
52 unittest
54 git status, diff
55 git commit -a
57 python manage.py startapp
58 functional tests are from the user's point of view
   unit tests are from the programmer's point of view
   functional = external, unit = internal
59 Django TestCase smoke test
60 git diff --staged (or --cached)
60 Django MVC/Model-Template-View
60 URL request
62 lists/views.py
64 superlists/urls.py
66 git commit -am "message"
67 test_home_page_returns_html
68 unit testing cycle
71 git log --oneline
74 trivial tests don't take time to write anyway, so don't complain
   it's good to have a placeholder
75 functional_tests typing (send_keys)
77 explicit wait
78 don't test constants such as HTML
79 templates
81 install app in settings.py
83 render_to_string (it's complicated)
83 Django Test Client assertTemplateUsed
85 when refactoring, change code or tests, but not both at the same time
87 write HTML to match functional test
91 functional tests are the final judge on whether the app works or not
93 simple POST form
93 if an unexpected error appears in a functional test, visit the page
   manually or add a time.sleep()
95 csrf_token
96 test save POST request: client.post
97 retrieve POST variable: request.POST['name']
100 f-string in helpful error message
101 "cheat" in template
101 Red, Green, Refactor: remove magic constants
    Triangulation: if the tests can be passed by cheating, write a better test
102 Three strikes and refactor
103 in functional_tests, put helper functions after tearDown()
105 Django ORM (test models)
105 save and retrieve item
106 a "real" unit test shouldn't touch the database
107 models.py: Item(models.Model)
107 migrations add and remove database tables. It's like version control for
    databases
108 makemigrations
108 even without a DB column, it is allowed to assign .text to an Item
108 TextField() in a model
109 default value in model field
110 save POST to DB in the test
111 save item in view
112 test: only saves when necessary
112 unit tests should only do one thing
113 redirect after POST
113 Item.objects.create(text=new_text) is equivalent to Item(); item.save()
114 test redirection
115 separate saving POST from redirect
116 test display of several items
117 template {% for item in items %}
118 SQLite DBs are disk files
119 python manage.py migrate
120 forloop.counter
121 git tag tagname
121 remove db.sqlite3, migrate (--noinput seems unnecessary)
122 regression: when new code breaks functionality that was working
    Red/Green/Refactor
123 Triangulation: add a new test to justify the generalization of the
    implementation
124 need to isolate tests
125 LiveServerTestCase creates a test DB
125 functional_tests/__init__.py
125 git mv
126 python manage.py test functional_tests
127 LiveServerTestCase live_server_url
128 git diff --staged -M
129 unit tests: python manage.py test lists
130 implicit waits should be avoided
130 time.sleep(1) is an explicit wait
131 replace explicit waits with a tool that waits as much as needed, up to
    a timeout
133 use wait_for instead of check_for
134 purposely introduce errors
135 ensure test isolation and manage global state; reset any permanent state
    at the end of a test
135 avoid voodoo sleeps
135 don't rely on implicit waits
136 how to design multiple lists, each with its own URL?
137 instead of a long design process, create a minimum viable application as
    quickly as possible
138 You Ain't Gonna Need It! (YAGNI)
138 REST style (Representational State Transfer)
591 REST allows an user to obtain and update information about resources
138 REST suggests the URL
    /lists/<list_id>/  for a list,
    /lists/new
    /lists/<list_id>/add_item
    it is not strictly REST, only inspired by it
139 PUT is not available in HTML forms
139 add a new FT (functional test) for new functionality
140 regression test
140 rename current FT to list_for_one_user
141 multiple_users_at_different_urls
141 self.assertRegex(list_url, '/lists/.+')
141 second user
142 ## metacomments explain how the test works
142 page_text in FT
143 redirection after POST
144 hardcode URL for adding single item
144 redirect to hardcoded URL in views
145 replace assertIn with assertContains; it automatically takes care of
    response.content.decode()
146 create new URL for the-only-list
146 new view function for the-only-list
148 <form method="POST" action="/"> so that first test passes
149 Green? Refactor
149 grep -E "class|def" lists/tests.py
150 use a separate template for lists
150 test list uses list template
151 copy home.html to list.html
151 start a new To-Do list in home
151 home view redirects to the-only-list or renders the simple home.html
152 progress was made for new design but old stuff continues working
153 NewListTest tests POST and redirection
153 new /lists/new URL
153 URLs without a trailing slash are "actions" that modify the DB
153 assertRedirects
154 add new /lists/new URL
155 copy code from home page to pass tests
156 clean up home_page view and remove test_only_saves_when_necessary
157 update POST action in templates
158 List test
159 'list' shadows built-in 'list'
159 assertEqual(item.list, my_list) compares primary keys
159 try iterating to pass test
159 edit models.py (not shown in book)
160 naively set list to TextField and make a migration
161 define list as ForeignKey
161 delete migration only if it hasn't been commited to version control and
    has not been applied to DB (migrate)
162 NOT NULL constraints fail when ForeignKey was introduced
162 create list in test
163 new list in creating list view
164 list id as its URL
164 f-string
165 greedy list id URL (in Django 2, <int:list_id>)
166 add id to view_list
166 filter objects
167 redirect to new list id
168 functional test detects that each new item creates a new list
169 NewItemTest saves to existing list
169 create other list to prevent checking correct list as first()
170 \d regular expression instead of a greedy one
171 URL for adding item
172 add_item view
173 ListViewTest for passing correct list to template
173 response.context
173 remove items from view_list context ...
174 ... but change template to use list.item_set
175 include list_urls
176 lists/urls.py
179 delete development DB because back-and-forth edits may have left
    IntegrityErrors

Part II
180 CSS, static files
181 NewVisitorTest in functional_tests
181 test inputbox is centered
181 assertAlmostEqual(delta=10)
182 test inputbox in new list
183 git reset --hard
183 Bootstrap download
185 Bootstrap HTML template
185 template inheritance
186 blocks
188 Bootstrap grid, center
189 Django static files
190 Django looks for static/ subfolders in any app that's installed
191 StaticLiveServerTestCase
192 Windows errors when testing
192 Jumbotron
193 Bootstrap font size
194 Less, Sass
195 collectstatic, static folders
196 static folder should be outside version control because it contains copies
    of what's in app/static folders (lists/static)
196 STATIC_ROOT setting
     = os.path.abspath(os.path.join(BASE_DIR, '../static'))
197 tree
197 collectstatic to ../static
199 npm, bower
199 a minimal smoke test should be written to ensure CSS and static files are
    working
199 write tests to check layout is working without testing what they really are
    (don't test constants)
201 staging site
202 deployment overview
203 functional test setup: if staging
204 set URL in an environment variable
205 set variable inline; don't use export
206 provision a new server then deploy
207 PaaS or virtual server
207 Ubuntu server (AWS, Rackspace, Digital Ocean (do not use, bad IPs), Linode)
208 user with sudo privileges
208 nginx: sudo systemctl start nginx
209 Python 3.6 deadsnakes PPA
210 A-record is a reference between a domain name and a specific IP
211 provisioning usually requires root privileges
211 execute web server as a user different from root
212 DB file location
213 export Bash variable; it only lasts for the session
214 requirements.txt
214 python -m venv ../virtualenv
215 nginx setup
216 ln -s ../sites-available/$SITENAME /etc/nginx/sites-available/$SITENAME
216 nginx.conf uncomment server_names_hash_bucket_size 64
217 sudo nginx -t (test)
218 migrate
219 nginx log is /var/log/nginx/error.log
221 gunicorn for Django, nginx for static
221 set DEBUG=False, edit ALLOWED_HOSTS, systemd
222 gunicorn does not serve static files
223 collectstatic
223 nginx location /static {...}
224 Unix sockets in /tmp
225 Debug, allowed_hosts
226 systemd /etc/systemd/.../gunicorn.service
227 sudo journalctl -u gunicorn
227 daemon-reload
228 provisioning summary
228 deploy_tools subfolder for configuration files
230 provisioning notes
231 repo tree
232 deployment for production
232 security, fail2ban
233 deployment should be reproducible
233 fabric3 fab files
234 fabfile example
234 leading underscore for custom functions
235 _create_directory_structure
235 fabric's run()
235 mkdir -p
235 instead of os.path.join just use "/" in strings (because of Windows)
236 git fetch gets commits but unlike pull, it does not update the source tree
    immediately
236 git reset --hard overwrites local changes
236 update settings.py with sed
237 secret_key.py
238 virtualenv, static, migrate
240 fabric config
241 fab deploy:host=user@site
243 sed replace
243 tee writes pipe output to a file
243 symbolic link
245 git tag
245 git log --graph --oneline --decorate
245 list of deployment resources
247 item validation
