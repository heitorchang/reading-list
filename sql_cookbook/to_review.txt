
-- NOTE: copied to subdirectory: practice_2022-06/sql_review.txt

-- MUST REVIEW: interesting recipes

-- METADATA (Ch. 5)
-- HINT: typing \gdesc instead of ; at the end of the interactive console shows the type of the result
-- \d  shows tables (no ; needed)
-- \d emp  describes emp (no ; needed)

-- rn: row number

-- 1.3 select col from tbl where col = val or comm is not null
-- 1.7 concat: select ename || ' works well'
-- 1.12 replace null: coalesce(comm, 0)
-- 1.13 ... where deptno in (10, 20) or ename like '%er'

-- 2.5 select ename, case when comm is null then 0 else 1 end as is_null
-- 2.6 order by case when job = 'SALES' then comm else sal end

-- 3.2 select e.ename, d.loc from emp e join dept d on e.deptno = d.deptno
-- 3.3 where (ename, job, sal) in (select ... intersect select ...)
-- 3.4 select deptno from dept except select deptno from emp;
-- 3.5 select d.* from dept d left join emp e on d.deptno = e.deptno where e.deptno is null;
-- 3.6 select e.ename, eb.received from emp e join dept d on e.deptno = d.deptno left join emp_bonus eb on e.empno = eb.empno
-- 3.9 (see file)
-- 3.10 (see file)

-- 4.1 insert into dept (ename, loc) values ('Joe', 'Los Angeles');
-- 4.16 delete from dupes where id not in (select min(id) from dupes group by name);

-- 6.1 select substr(e.name, iter.pos, 1) as c from (select ename ...) e,
         (select id as pos from t10 order by id) iter where iter.pos <= length(e.ename)
-- 6.4 select ename, replace(translate(ename, 'AEIOU', '*'), '*', '') as stripped from emp;

-- 7.1 select deptno, avg(sal) as avg_sal from emp group by deptno;
-- 7.4, 7.5 select count(comm) from emp;
-- 7.8 with cte as (select lag(sales, 1) as lag1, lag(sales, 2) as lag2 ...) select (sales + lag1 + lag2) / 3.0 as moving_avg
-- 7.9 select sal from (select sal, dense_rank() over (order by cnt desc) as rnk from (select sal, count(*) as cnt from emp) x ) y
         where rnk = 1;
-- 7.10 select percentile_cont(0.5) within group (order by sal) from emp; -- the only recipe that uses WITHIN GROUP
-- 7.11 select d.deptno, 100.0 * sum(case when d.deptno = e.deptno then sal end) / sum(sal) as pct from dept d, emp e group by d.deptno;
-- 7.13 select avg(sal) from emp where sal not in ((select min(sal) from emp), (select max(sal) from emp));

-- select current_date; for "now()"
-- date_trunc('year', current_date) returns a timestamp with time zone (might want to cast it as date)
-- 8.1 select hiredate - interval '5 months' as d5 from emp;
-- 8.4 select extract(year from max_hd) - extract(year from min_hd) from emp;
-- 8.5 select case when ename = 'ALLEN' then 'A initial' when ename = 'YODA' then 'Y initial' end init from emp;
-- 8.7 select ename, next_hd - hd from (select empno, hiredate hd, lead(hiredate) over (order by hiredate) next_hd from emp) x, emp e
         where x.empno = e.empno;

-- 9.2 select cur_year + interval '1 year' - cur_year from (select date_trunc('year', current_date)::date as cur_year) x;
-- 9.3 select extract(month from current_timestamp); -- also: year, day, dow
-- 9.10 with first_of_mo as (select generate_series('2006-01-01'::date, '2006-12-31'::date, '1 month') as d)
          select first_of_mo.d, count(hiredate) from first_of_mo
	  left join emp on extract(month from d) = extract(month from hiredate) and
	    extract(year from d) = extract(year from hiredate)
	group by d order by d;
-- 9.12 select ... from emp a, emp b where to_char(a.hiredate, 'month') = to_char(b.hiredate, 'month')  and a.empno < b.empno;
-- 9.13 select ... where a.ename = b.ename and b.proj_start >= a.proj_start and b.proj_start <= a.proj_end and a.proj_id != b.proj_id;

-- 10.2 with next_sal_tab as (select deptno, sal, lead(sal) over (partition by deptno order by hiredate) as next_sal from emp)
          select deptno, sal, coalesce(cast(sal - next_sal as text), 'N/A') as diff from next_sal_tab;
-- 10.4 with yrs as (select generate_series(2000, 2009) as y) select yrs.y, count(hiredate) from yrs left join emp on extract(year from hiredate) = y group by y order by y;
-- 10.5 select i from generate_series(0, 20, 2) as g(i);

-- 11.1 select ename, sal from emp order by sal limit 3 offset 5;
-- 11.3 select e.ename, d.deptno from dept d left join emp e on d.deptno = e.deptno and e.deptno in (10, 20) order by d.deptno;
-- 11.5 select ename, sal from (select ename, sal, dense_rank() over (order by sal desc) rnk from emp) x where rnk <= 5;
-- 11.10 select distinct job from emp;
-- 11.12 select ... case when gs.n = 2 then proc + 1 else null end as verified, case when gs.n = 3 ... else null end as shipped from ...

-- 12.15 select ename, case when job = 'clerk' then 1 else 0 end as is_clerk, case when job = 'prez' then 1 else 0 end as is_prez;
-- 12.17 select ceil(tx_id / 5.0) as grp, min(tx_date) as tx_start from tx_log group by ceil(tx_id / 5.0); -- assume one id is one second
-- 12.19 select e.hiredate, e.sal, (select sum(sal) from emp d where d.hire between e.hire - 90 and e.hire) as spend from emp e
           order by e.hiredate;

-- 13.1 select c.ename || ' works for ' || p.ename from emp c, emp p where c.mgr = p.empno;
-- 13.3 with recursive x (ename, empno) as (select ename, empno from emp where mgr is null union all select x.ename || '->' || e.ename,
          e.empno from emp e, x where e.mgr = x.empno) select ename as emp_tree from x order by ename;
-- 13.4 with recursive x (ename, empno) as (select ename, empno from emp where ename = 'JONES' union all select e.ename, e.empno
          from emp e, x where e.mgr = x.empno) select ename from x;

-- window function() over (...)
-- framing clause
select hiredate, sal, sum(sal) over (order by hiredate
                                     range between unbounded preceding and current row) from emp;

select hiredate, sal, sum(sal) over (order by hiredate
                                     rows between unbounded preceding and current row) from emp;

select hiredate, sal, sum(sal) over (order by hiredate
		                     rows between current row and unbounded following) from emp;

-- frame exclusion
exclude current row
exclude group
exclude ties

select distinct extract(month from hiredate), count(*) over (partition by extract(month from hiredate)) from emp;

-- over (order by col) is actually over (rows between unbounded preceding and current row)
-- over () takes all rows
-- use primary keys in over (order by x, pk) to avoid adding repeated values


-- regexp where
select empno from emp where empno::text similar to '7[0-9][0-5]{2}';

-- LAG leaves space on top (see past)
select hiredate, lag(hiredate) over (order by hiredate), lag(hiredate, 2) over (order by hiredate) from emp;

-- LEAD leaves space on on bottom (see future)
select hiredate, lead(hiredate) over (order by hiredate), lead(hiredate, 2) over (order by hiredate) from emp;

-- conditional
select ename, hiredate, case when hiredate < '2006-01-01' then 'old' else 'new' end emp_time from emp;

-- conditional on column
select ename, case sal when 5000 then 'a lot' else 'ok' end from emp;

-- use coalesce to replace NULLs with a real value
select coalesce(comm, 0) from emp;

-- adding an 'index' column
select row_number() over (order by empno), ename from emp;


-- selecting from an integer range
select i from
  (select generate_series(1, 10) as i) x
where i between 3 and 6;

-- OR

select i from generate_series(1, 10) g(i)
where i between 3 and 6;

-- pivot: crosstab()

-- join ranges
select i, j from generate_series(1, 10) as t(i)
join (select j from generate_series(5, 19) as t(j)) x
on i = j;

-- create range of dates
select * from generate_series('15-jan-1999'::date, '15-dec-1999'::date, '1 month');
-- PROBLEM: looks like because of daylight savings, a day is not included at the end

-- all days of a month
select * from generate_series('2022-07-01'::date, '2022-07-01'::date + interval '1 month' - interval '1 day', '1 day');

-- all first of months
select * from generate_series(date_trunc('year', current_date), date_trunc('year', current_date) + interval '1 year' - interval '1 day', '1 month');

-- alternative method
select '2020-01-15'::date + gs.id - 1 from generate_series(1, 15) as gs(id);
-- subtract 1 to avoid off-by-one error. This returns 15 rows.

-- to_char(hiredate, 'month')

-- casting
select cast('123' as integer);
select total::text;
select '02-feb-2020'::date;

-- replace string
replace(source, old, new);

-- replace characters in string
-- Latin originally did not have J or U, replace them with I and V
select translate('JULIUS', 'JU', 'IV');

-- substr index is 1-based
substr(str, from, count)
select substr('banana', 2); --> anana

select lpad('2', 3, '0'); --> '002'

-- check if any row is returned in a subquery
select exists(select * from emp where sal = 5000); --> t
select exists(select * from emp where sal > 9000); --> f

-- group hires by year and month (similar to first technical interview)
with cte as (
  select ename, hiredate, extract(year from hiredate) || '-' || extract(month from hiredate) as yrmo
  from emp
)
select ename, yrmo, count(*) over (partition by yrmo),
count(*) over () as total
from cte;
-- PROBLEM: without ename, partition will only sum 11 rows, because there are only 11 unique yrmos. window functions run last.
-- group by yrmo; -- culprit, was grouping by before the window function


select distinct extract(month from hiredate), count(*) over (partition by extract(month from hiredate)) from emp;

-- solution: use DISTINCT
select distinct extract(yr from hiredate) as yr, extract(month from hiredate) as mo, count(*) over (partition by extract(yr from hiredate), extract(month from hiredate))
from emp;

-- cleaner
with formatted_dates as (
  select to_char(hiredate, 'yyyy-mm') as yrmo
  from emp
), totals as (
  select yrmo,
  count(*) over (partition by yrmo) as ct
  from formatted_dates
)
select distinct yrmo, ct from totals
order by yrmo;


-- without window function
-- select table with values as outer table, and counts of data as subquery
with cte as (
select yrmo,
(select count(*) from emp e where to_char(hiredate, 'yyyy-mm') = yrmo) as ct
from year_months
)
select yrmo, ct from cte
where ct > 0
order by yrmo;


-- sum(sales) over (order by date1 rows between 2 preceding and current row) should only be valid when there are 3 available rows (first two rows should be NULL)

select sal, sum(sal) over w, count(sal) over w from emp
window w as (order by sal rows between current row and 2 following);
-- then filter out count < 3

-- choose range of results
select * from emp order by sal limit 3 offset 5;

-- generate_series as range
with rng as (
 select generate_series(1, 10) as i
)
select i, i*i as square from rng;
