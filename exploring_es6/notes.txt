http://exploringjs.com/es6/ch_about-book.html
Axel Rauschmayer

A protocol defines interfaces (signatures for methods and functions) and rules for using them
The idea is to specify how a service is to be performed

Given obj.meth(), obj is the receiver of the method call, and accessible via 'this'

The (type) signature of a function describes how the function is to be called, and what its inputs and outputs are
For example, parseInt(string : string, radix? : number) : number

Implementations of internal slots are left unspecified.

An environment stores the variables of a scope and is basically a dictionary that maps variable names to values.

A binding is an entry in an environment

Destructive methods and functions modify their parameters or receivers.



http://exploringjs.com/es6/ch_about-es6.html

TC39 is ECMA (European Computer Manufacturers Association) Technical Committee 39. It meets regularly and invites experts to evolve JavaScript



http://exploringjs.com/es6/ch_one-javascript.html

Evolution without versioning is possible by always being backward-compatible



http://exploringjs.com/es6/ch_core-features.html

let is a block-scoped version of var. Variables declared with var are function-scoped

const is used for variables whose values never change

(avoid var)

Using a block and a let declaration, we restrict the scope of a variable to that block.

{  // open block
	let tmp = ...;
	...
}  // close block

Template literals use the backtick and ${x}

function printCoord(x, y) {
	console.log(`(${x}, ${y})`);
}

Template literals can also span multiple lines

const HTML5_SKELETON = `
	<!doctype html>
	<html>
	...
	</html>`;

Arrow functions don't shadow this

function UiComponent() {
	var button = document.getElementById('myButton');
	button.addEventListener('click', () => {
		console.log("click");
		this.handleClick();
	});
}

Arrow functions are also used for short callbacks that only return results of expressions

const squares = arr.map(x => x * x);
'(x) => x * x' and 'x => x * x' are both allowed

Destructuring makes code simpler by making temporary variables unnecessary

const [, year, month, day] =
	/^(\d\d\d\d)-(\d\d)-(\d\d)$/
	.exec('2999-12-31');

The empty slot at the beginning skips the Array element at index zero.

const {writable, configurable} is an abbreviation for { writable: writable, configurable: configurable }

const {writable, configurable} = Object.getOwnPropertyDescriptor(obj, 'foo');

for-of is concise and you can break from it.

const arr = ['a', 'b', 'c'];
for (const elem of arr) {
	console.log(elem);
}

for (const [index, elem] of arr.entries()) {  // destructuring
	console.log(index + '. ' + elem);
}

Default values for parameters may be defined in the signature

function foo(x=0, y=0) {
	...
}

Handling named parameters is also done with destructuring

function selectEntries({ start=0, end=-1, step=1 }) {
	...
}

To make the parameter optional, specify {} as a parameter default value

function selectEntries({ start=0, end=-1, step=1 } = {}) {
	...
}

Rest parameters are used to accept an arbitrary number of arguments via the ... operator

Trailing parameters appear after required parameters

function format(pattern, ...args) {
	...
}

... is also the spread operator, that turns arrays into parameters

Math.max(...[-1, 5, 11, 3])

Array.prototype.push() appends all of its arguments as elements to its receiver. There is no method that destructively appends an Array to another one

arr1.push(...arr2);

The spread operator can also non-destructively turn the contents of its operand into Array elements.

const arr1 = ['a', 'b'];
const arr2 = ['c'];
const arr3 = ['d', 'e'];

console.log([...arr1, ...arr2, ...arr3]);

Methods are properties whose values are functions

Method definitions is a special syntax for creating methods

const obj = {
	foo() {
		...
	},
	bar() {
		this.foo();
	},
}

Classes provide syntax for constructor functions and method definitions. There are no commas between the parts of a class

class Person {
	constructor(name) {
		this.name = name;
	}
	describe() {
		return 'Person called ' + this.name;
	}
}

Subclassing is done with 'extends'

class Employee extends Person {
	constructor(name, title) {
		super(name);
		this.title = title;
	}
	describe() {
		return super.describe() + ' (' + this.title + ')';
	}
}

'Map' is a built-in data structure that can use arbitrary values as keys, and keys don't have to be escaped

const map = new Map();
function countWords(word) {
	const count = map.get(word) || 0;
	map.set(word, count + 1);
}

Strings' beginning and end can be checked with .startswith('abc') and .endswith('xyz'). Contents may be checked with .includes('jkl'). They have an optional second parameter, which specifies where the string to be searched starts or ends.

Strings may be repeated with .repeat(numberOfTimes)

arr.findIndex(x => Number.isNaN(x));  // can be used to find NaN in an Array

const arr = Array.from(arguments);

const arr1 = [...'abc'];
	// ['a', 'b', 'c']

const arr = new Array(2).fill('x');
	// ['x', 'x']

Multiple exports are called 'named exports'

// -- lib.js --
export const sqrt = Math.sqrt;
export function square(x) {
	return x * x;
}
export function diag(x, y) {
	return sqrt(square(x) + square(y));
}

// -- main1.js --
import { square, diag } from 'lib';
console.log(square(11));
console.log(diag(3, 4)); 

// -- main2.js --
import * as lib from 'lib';  // import modules as objects
console.log(lib.square(11));
console.log(lib.diag(3, 4)); 

Single exports are done via a 'default export'

// -- myFunc.js --
export default function () { ... }  // no semicolon

// -- main1.js --
import myFunc from 'myFunc';
myFunc();



http://exploringjs.com/es6/ch_numbers.html

0xFF  hex
0b11  bin
0o10  oct

Number.EPSILON (for comparing floating point numbers with a tolerance for rounding errors)
Number.isInteger(num)

Number.isSafeInteger(num)
Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER

Number.isFinite, Number.parseFloat, Number.parseInt

Math.sign, Math.trunc, Math.log10, Math.hypot

The method toString(radix) can be used to display the number in a base other than 10.

255..toString(16)  // the double dots are necessary so that the dot for property access is not confused with a decimal dot

The radix in Number.parseInt() should never be omitted.

function epsEqu(x, y) {
	return Math.abs(x - y) < Number.EPSILON;
}
console.log(epsEqu(0.1+0.2, 0.3));  // true

Math.cbrt(x) returns the cube root of x

Math.expm1 and Math.log1p provide higher precision when results are close to 1

Math.log2, Math.log10

Math.clz32(x) counts the leading zero bits in the 32-bit integer x

Trigonometric methods Math.sinh, .cosh, .tanh, .asinh, .acosh, .atanh, .hypot(...values)



http://exploringjs.com/es6/ch_strings.html

'\u{1F680}' is a Unicode escape that lets you specify any code point

With String.raw`Not a newline: \n` backslashes are not special and escapes are not interpreted.

Strings are iterable, which means that you can use for-of to iterate over their characters and use ... to turn them into Arrays

To count the Unicode code points in a string, use iteration (convert it to an Array) and get its length: [...'x\uD83D\uDE80y'].length

To reverse a string with non-BMP code points (larger than 16 bits) [...str].reverse().join('') However, this approach does not work with combining marks. A library such as Esrever is needed.

The method codePointAt(idx) returns the numeric value of a code point. The opposite is String.fromCodePoint(i)

String.prototype.match(regexp) calls regexp[Symbol.match](this)

String.prototype.replace(searchValue, replaceValue) calls searchValue[Symbol.replace](this, replaceValue)

String.prototype.search(regexp) calls regexp[Symbol.search](this)

String.prototype.split(separator, limit) calls separator[Symbol.split](this, limit)

The parameters don't have to be regular expressions anymore. Any objects with appropriate methods will do.



http://exploringjs.com/es6/ch_symbols.html

Symbols are a primitive type that serve as unique IDs. They are created via a factory function

const mySymbol = Symbol('mySymbol');

Every time you call Symbol('Red'), a new symbol is created.

The optional parameter is a descriptive string that is shown when printing the symbol.

Symbols are mainly used as unique property keys (they do not clash with other symbols or strings).

An object can be made iterable by using Symbol.iterator as the key of a method

const iterableObject = {
	[Symbol.iterator]() {  // enables the use of the for-of loop
		...
	}
}
for (const x of iterableObject) {
	console.log(x);
}

The only way to convert a Symbol to a String is with an explicit call:
const sym = Symbol('desc');
String(sym)  // 'Symbol(desc)'

The following operations are aware of symbols as property keys:

Reflect.ownKeys()
Property access via []
Object.assign()

The following operations ignore symbols as property keys:

Object.keys()
Object.getOwnPropertyNames()
for-in loop

Symbols can be used as property keys

Classes and object literals have a feature called 'computed property keys': the key of a property is specified via an expression in square brackets.

const MY_KEY = Symbol();

const obj = {
	[MY_KEY]: 123
};

const FOO = Symbol();
const obj2 = {
	[FOO]() {
		return 'bar';
	}
};
console.log(obj2[FOO]());  // bar

Property keys are either strings or symbols
String-valued property keys are called property names
Symbol-valued property keys are called property symbols

Object.getOwnPropertyNames() ignores symbol-valued property keys
Object.getOwnPropertySymbols() ignores string-valued property keys
Reflect.ownKeys() considers all kinds of keys
Object.keys(obj) only considers enumerable property keys that are strings

Strings do not work well as enum constants because they may be used in different contexts (COLOR_BLUE and MOOD_BLUE). Using symbols, each value is unique.

const COLOR_BLUE = Symbol('Blue');

Symbols are useful for non-public properties in inheritance hierarchies and to keep meta-level properties from clashing with base-level properties.

Next: 7.4.1 http://exploringjs.com/es6/ch_symbols.html
