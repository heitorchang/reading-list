Ch. 1 Introduction
-----

Section 1.1
-----------

special characters ? ! . + - * / < = > : $ % ^ & _ ~ @ are allowed in identifiers

#; is a "datum comment" (applies to the next value)

#| ... |# is a block comment. they may be nested

#<thing> indicates that the object does not have a printed representation

Section 1.3
-----------

an exception with condition type &assertion is raiesd when a requirement (such as an index equal to or less than a vector size) is not met

Ch. 2 Getting started
-----

Section 2.2
-----------

The simplest expressions are strings, characters, numbers, symbols, and lists.

(quote) forces a list to be treated as data (and not a procedure application)

An unquoted symbol is treated as a variable. Quoting a symbol prevents Scheme from treating it as a variable

The empty list is printed as () and must be quoted when entering it interactively. (list) also returns the empty list

Section 2.4
-----------

(let ((x 2))
  (+ x 3)) => 5

(let ((x 2)
      (y 3))
  (+ x y)) => 5

Brackets are often used instead of parentheses to delimit the bindings of a let expression

(let ([list1 '(a b c)] [list2 '(d e f)])
  (cons (cons (car list1) (car list2)) ...))

Procedures may also be used in let bindings:

(let ([f +])
  (f 2 3)) => 5

let expressions may be nested

Section 2.5
-----------

lambda creates new procedures

(lambda (x) (+ x x)) => #<procedure>

Argument values (or actual parameters) are bound to the formal parameters within the body of the lambda expression in the same way as let binds variables to values

(let ([double-any (lambda (f x) (f x x))])
  (list (double-any + 14)
        (double-any cons 'a))) => (28 (a . a))

The occurrence of a variable outside an expression is said to be a free variable

(let ([x 'a])
  (let ([f (lambda (y) (list x y))])
    (f 'b))) => (a b)

Above, x occurs free in the lambda expression. It may be called a free variable of the lambda expression

If a lambda expression's formal parameter specification is a single variable (and not the usual list), all actual parameters are put into a single list and the single variable is bound to this list.

(let ([f (lambda x x)])
  (f 2 3 4)) => (2 3 4)

Section 2.6
-----------

Top-level definitions are established with define

The shorter syntax for defining procedures is pejoratively called the "defun" syntax (after the defun form in other Lisp languages), and it is not usually employed in this book. The defun syntax tends to mask the reality that procedures are not intimately tied to variables (or names) as they are in many languages.

Section 2.7
-----------

assertion-violation is used to report an error (looks like this is in R6RS and not immediately available in Chicken)

Example of cond:

(define sign
  (lambda (n)
    (cond
      [(< n 0) -1]
      [(> n 0) +1]
      [else 0])))
