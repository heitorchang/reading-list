by Robert J. Chassell

page number refers to absolute pdf's page, not book's page

17 lists look like '(rose violet daisy buttercup). ' is "quote"

17 atoms are separated by whitespace and may be numbers, strings and symbols

18 () is both an atom and a list

20 q exits the debugger

25 a symbol may be called a variable because it holds a value that may vary

25 a symbol can have both a value and a function attached to it (think of a symbol being a chest of drawers, with a drawer for a value and another for a function)

26 binding a variable to a value is assigning it a value

28 (concat "abc" "def") produces "abcdef"

28 (substring "The quick brown fox jumped." 16 19) produces "fox"

28 (substring STRING BEGINNING-ZERO-INDEXED-INCLUSIVE END-EXCLUSIVE)

28 (number-to-string NUMBER) (int-to-string NUMBER)

29, 32, 34 'hello is a quoted symbol. It is the symbol itself. A quoted expression is returned as written, and not evaluated

30 marker is a special object representing a buffer position

30 -p at the end of a function stands for "predicate". The function determines whether some property is true or false.

30 zerop is a test of whether its argument is zero

30 listp tests whether its argument is a list

30 (message STRING) prints STRING in the echo area

30 if there is a '%s' (a control sequence) in the string, the message function looks to the argument that follows the string and replaces '%s' with this second argument

31 '%d' is used for an integer

31 multiple '%s' and '%d' look for the corresponding value following the first string

32 set, setq and let assign a value to a variable

32 when using set, both the variable and the value need to be quoted, unless you want to evaluate them

32 setq is just like set, except that the first argument is quoted automatically

33 setq works in pairs

(setq trees '(pine fir oak)
      herbivores '(gazelle zebra antelope))

33 set and setq make a symbol 'point' to a value

33 initialize a counter (setq counter 0)

increment the counter (setq counter (+ counter 1))

33 anything to the right of ; is a comment

37 nil means false and is a synonym for ()

38 C-u C-x C-e (universal-argument prefix argument eval-last-sexp) puts the result of the evaluation in the buffer instead of the echo area

38 (current-buffer) returns the buffer itself

38 (other-buffer) #<buffer *scratch*>

(switch-to-buffer (other-buffer))

40 set-buffer appears in code instead of switch-to-buffer because programs "do not have eyes"

40 point is the position of the cursor

42 defun has up to five parts following defun:

1. the name of the symbol to which the function should be attached
2. a list of arguments or () if no arguments are to be passed
3. documentation
4. (interactive "OPTIONS") allows the function to be called with M-x or by typing a key
5. the body of the function (code)

43 a non-interactive function

(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (* 7 number))

43 C-h f describes a function

43 apropos prints only the first line of a multi-line documentation string

44 C-x C-e installs a function

45 most interactive functions are called for their side effects

46 an interactive version of multiply-by-seven

(defun multiply-by-seven-interactive (number)
  "Multiply NUMBER by seven."
  (interactive "p")
  (message "The result is %d" (* 7 number)))

46 "p" tells Emacs to pass the prefix argument to the function

46 run the interactive multiply-by-seven function with

C-u 6 M-x multiply-by-seven-interactive RET

C-u defaults to 4

47 M-<number> is the same as C-u <number>

49 let is a special form that creates a name for a local variable that overshadows any use of the same name outside the let expression

49 let is like a temporary and local setq 

50 (let varlist body...)

elements in the varlist are either symbols by themselves (that are given the initial value of nil) or a two-element list made up of a symbol and its initial value

(let ((zebra "stripes")
      (tiger "fierce"))
  (message "One animal has %s and the other is %s."
           zebra tiger))

52 if is a conditional special form

(if (> 5 4)
    (message "5 is greater than 4"))

53 (equal a b)

54 if-then-else

(if (> 4 5)
    (message "4 falsely greater than 5")
  (message "4 is not greater than 5"))

54 only nil is false; everything else is true. Remember that () is the same as nil

55 save-excursion saves the location of point and current buffer, executes the body, and then restores point to its previous location

56 point is immediately before the character where the cursor appears to be on top of

56 mark is another position in the buffer that can be set with set-mark-command (C-space)

56 the positions of marks are saved in the mark ring

56 the region is the part of the buffer between point and mark

57 save-excursion often occurs within a let expression

(let varlist
  (save-excursion
    body...))

57 eval-last-sexp prints in the current buffer if invoked with an argument

58 some of the argument codes for interactive functions are:

b name of an existing buffer
f name of an existing file
p numeric prefix argument
r point and the mark as two numeric arguments, smallest first

59 eq is used to check if the two arguments are the same object

59 equal checks if the two arguments have the same structure and contents

59 string ordering may be done with string< (string-lessp). There is no string-greaterp, <= or >=

59 message can use the control sequences %s (string or symbol), %d (number) and %c (character with given ASCII code)

62 (defun simplified-beginning-of-buffer ()
     "Move point to beginning of buffer, leave mark at previous position"
     (interactive)
     (push-mark)
     (goto-char (point-min)))

63 mark-whole-buffer (C-x h)

70 xref-find-definitions (M-.) goes to the source of a function or variable
