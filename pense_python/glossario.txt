Prefacio
--------

depuração: processo de encontrar e corrigir erros (bugs)


Cap. 1
------

entrada: recebimento de dados do teclado, arquivo, rede, ou outro dispositivo
saída: exibição de dados na tela, gravação num arquivo, ou envio pela rede
execução condicional: verificação de certas condições e execução do código adequado
repetição: execução de alguma ação várias vezes, geralmente com algumas variações

interpretador: um programa que lê e executa código Python
interpretador online: PythonAnywhere, replit.com, Deepnote

print() exibe um texto na tela (ele não imprime nada em papel)

Python debugger: módulo pdb

aspas (quote / quotation marks) marcam o começo e fim do texto. elas não aparecem no resultado.

aspas podem ser aspas simples ou aspas duplas. O começo e fim devem ser do mesmo tipo de aspas.

as aspas devem ser aspas retas, não curvas.

** é usado para exponeniciação. ^ (usado em outras linguagens) faz o XOR bitwise.

um valor é uma coisa básica trabalhada por um programa.

exemplos:
2: número inteiro
41.5: número de ponto flutuante
"Hello": uma string (ela tem esse nome porque as letras estão em uma sequência em cadeia)

type(valor) diz o tipo do valor.

valores entre aspas são do tipo string, por exemplo, '2'.
é uma representação visual do número, e operações matemáticas não funcionarão como esperado ('2' + '2' => '22')

números inteiros grandes não devem ter pontos ou vírgulas de milhares.


Cap. 2
------
Uma variável é um nome que se refere a um valor

uma instrução de atribuição cria uma nova variável e dá um nome a ela.

diagrama de estado: n -> 19

uma expressão é uma combinação de valores, variáveis, e e operadores

um valor por si só é considerado uma expressão

uma instrução é uma unidade de código que tem um efeito (exemplos: atribuição, print)

no modo script, uma expressão sozinha não tem efeito visível (como no modo interativo)
nesse caso, é necessário usar instruções print()

+ executa uma concatenação de strings (une duas strings pelas extremidades)

* executa a repetição de uma string pela quantidade desejada.

comentários começam com # (jogo da velha, cerquilha)

erro de sintaxe: a sintaxe se refere à estrutura de um programa e regras da linguagem.
exemplo: 8) falta o parênteses da esquerda.

erro de tempo de execução: aparece quando o programa é executado. esse tipo de erro é chamado de exceção

erro semântico: relacionado ao significado. o programa não faz o que deveria.

palavra-chave: uma palavra reservada pela linguagem, usada para construções e significados específicos, como lógica e fluxo de operações


Cap. 3
------
função: sequência de instruções que executa uma operação de computação. é possível criar funções anônimas com lambda.

para chamar uma função, use parênteses depois do nome dela.

expressões entre parênteses depois do nome da função são chamadas 'argumentos'

uma função "recebe" argumento(s) e "retorna" um resultado (o valor de retorno)

um módulo é um arquivo que contém uma coleção de funções relacionadas.

a instrução de importação 'import' cria um objeto de módulo que contém as funções e variáveis definidas no módulo.

notação de ponto: especificar um nome que pertence a um objeto (math.sin)

composição: combinar elementos de um programa

definição de função: a palavra-chave 'def' indica uma nova definição de função.

parênteses vazios depois de um nome de função indicam que a função não recebe argumentos.

a definição de uma função se chama cabeçalho. o resto é o corpo.

a endentação (por convenção) é de quatro espaços.

a definição de uma função cria um objeto de função, que tem o tipo "function"

fluxo de execução: a ordem na qual as instruções serão executadas

uma chamada de função desvia o fluxo de execução: em vez de ir à próxima instrução (de cima pra baixo), o fluxo salta para o corpo da função, e no final, volta para continuar de onde parou

dentro de uma função, é possível chamar outra função

algumas funções exigem vários argumentos

dentro de uma função, argumentos são atribuídos a variáveis chamadas parâmetros.

def print_twice(bruce) atribui o argumento a um parâmetro chamado bruce.

mnemonic: def f(a, b, c, *args, **kwargs) indicates that arguments are inside the function header definition.

argumentos são avaliados antes da função ser chamada.

o nome de uma variável passado como argumento é separado do nome do parâmetro (dentro da função)

[sec. 3.8]
